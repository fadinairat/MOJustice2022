// <auto-generated />
using System;
using MOE.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MOJustice.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CategoryPage", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("PagesPageId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "PagesPageId");

                    b.HasIndex("PagesPageId");

                    b.ToTable("CategoryPage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MOE.Models.AdminLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogDetails")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("LogFor")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("LogTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LogFor");

                    b.HasIndex("UserId");

                    b.ToTable("AdminLogs");
                });

            modelBuilder.Entity("MOE.Models.AdminLogFor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AdminLogFor");
                });

            modelBuilder.Entity("MOE.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ArDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<byte>("Deleted")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemsPerPage")
                        .HasColumnType("int");

                    b.Property<int?>("LangId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<bool>("Publish")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowAsMain")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowDate")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowDescription")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInCatList")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInPath")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInSearch")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInSiteMap")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowThumb")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowTitle")
                        .HasColumnType("bit");

                    b.Property<string>("Slug")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Thumb")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LangId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MOE.Models.CategoryTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CategoryTypesId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryTypesId");

                    b.ToTable("Category_Types");
                });

            modelBuilder.Entity("MOE.Models.Files", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("AllowComment")
                        .HasColumnType("tinyint");

                    b.Property<string>("ArDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CatId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Deleted")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("LangId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Parent")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<byte>("Publish")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ShowHome")
                        .HasColumnType("tinyint");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumb")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CatId");

                    b.HasIndex("LangId");

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("MOE.Models.FilesList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("Deleted")
                        .HasColumnType("tinyint");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("FilesList");
                });

            modelBuilder.Entity("MOE.Models.FilesType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArTitle")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("FileType");
                });

            modelBuilder.Entity("MOE.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte?>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Deleted")
                        .HasColumnType("tinyint");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("P1")
                        .HasColumnType("bit");

                    b.Property<bool>("P10")
                        .HasColumnType("bit");

                    b.Property<bool>("P11")
                        .HasColumnType("bit");

                    b.Property<bool>("P12")
                        .HasColumnType("bit");

                    b.Property<bool>("P13")
                        .HasColumnType("bit");

                    b.Property<bool>("P14")
                        .HasColumnType("bit");

                    b.Property<bool>("P15")
                        .HasColumnType("bit");

                    b.Property<bool>("P16")
                        .HasColumnType("bit");

                    b.Property<bool>("P17")
                        .HasColumnType("bit");

                    b.Property<bool>("P18")
                        .HasColumnType("bit");

                    b.Property<bool>("P2")
                        .HasColumnType("bit");

                    b.Property<bool>("P20")
                        .HasColumnType("bit");

                    b.Property<bool>("P3")
                        .HasColumnType("bit");

                    b.Property<bool>("P4")
                        .HasColumnType("bit");

                    b.Property<bool>("P5")
                        .HasColumnType("bit");

                    b.Property<bool>("P6")
                        .HasColumnType("bit");

                    b.Property<bool>("P7")
                        .HasColumnType("bit");

                    b.Property<bool>("P8")
                        .HasColumnType("bit");

                    b.Property<bool>("P9")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LangId");

                    b.HasIndex("UserId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("MOE.Models.HtmlTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Deleted")
                        .HasColumnType("tinyint");

                    b.Property<string>("FilePath")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("LangId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LangId");

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.ToTable("HtmlTemplates");
                });

            modelBuilder.Entity("MOE.Models.HtmlTemplatesType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HtmlTemplatesTypes");
                });

            modelBuilder.Entity("MOE.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Deleted")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("MOE.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Deleted")
                        .HasColumnType("tinyint");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("LocationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LangId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("MOE.Models.MenuLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("MenuLocations");
                });

            modelBuilder.Entity("MOE.Models.Page", b =>
                {
                    b.Property<int>("PageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PageId"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("AllowComment")
                        .HasColumnType("bit");

                    b.Property<bool>("Archive")
                        .HasColumnType("bit");

                    b.Property<bool>("AsMenu")
                        .HasColumnType("bit");

                    b.Property<int?>("Audio")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("EditedBy")
                        .HasColumnType("int");

                    b.Property<int?>("Gallery")
                        .HasColumnType("int");

                    b.Property<int?>("LangId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastEdit")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PageDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Parent")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<bool>("Publish")
                        .HasColumnType("bit");

                    b.Property<string>("RedirectUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("ShowAsMain")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowAsRelated")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowDate")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInSearchPage")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInSiteMap")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowRelated")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowThumb")
                        .HasColumnType("bit");

                    b.Property<string>("Slug")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Sticky")
                        .HasColumnType("bit");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Thumb")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Thumb2")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("TranslateId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ValidDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Video")
                        .HasColumnType("int");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("PageId");

                    b.HasIndex("LangId");

                    b.HasIndex("Parent");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("MOE.Models.PageCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("LangId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PageId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LangId");

                    b.HasIndex("PageId");

                    b.ToTable("PagesCategories");
                });

            modelBuilder.Entity("MOE.Models.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BodyColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ControlDefaultLang")
                        .HasColumnType("int");

                    b.Property<string>("FooterColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HeaderBg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LeftBoxColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MenuFontColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MenuFontHoverColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SummaryColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TitlesColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WebDefaultLang")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("MOE.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Deleted")
                        .HasColumnType("tinyint");

                    b.Property<int>("ItemsPerPage")
                        .HasColumnType("int");

                    b.Property<int?>("LangId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TempId")
                        .HasColumnType("int");

                    b.Property<string>("Thumb")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Url")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LangId");

                    b.HasIndex("TempId");

                    b.HasIndex("UserId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MOE.Models.TagRel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("Deleted")
                        .HasColumnType("tinyint");

                    b.Property<int?>("LangId")
                        .HasColumnType("int");

                    b.Property<int?>("PageId")
                        .HasColumnType("int");

                    b.Property<int>("RelType")
                        .HasColumnType("int");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LangId");

                    b.HasIndex("PageId");

                    b.HasIndex("TagId");

                    b.ToTable("TagsRel");
                });

            modelBuilder.Entity("MOE.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int");

                    b.Property<byte>("Deleted")
                        .HasColumnType("tinyint");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int?>("LangId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("GroupId");

                    b.HasIndex("LangId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CategoryPage", b =>
                {
                    b.HasOne("MOE.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOE.Models.Page", null)
                        .WithMany()
                        .HasForeignKey("PagesPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MOE.Models.AdminLog", b =>
                {
                    b.HasOne("MOE.Models.AdminLogFor", "AdminLogFor")
                        .WithMany("AdminLogs")
                        .HasForeignKey("LogFor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOE.Models.User", "User")
                        .WithMany("AdminLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminLogFor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MOE.Models.Category", b =>
                {
                    b.HasOne("MOE.Models.Language", "Language")
                        .WithMany("Categories")
                        .HasForeignKey("LangId");

                    b.HasOne("MOE.Models.HtmlTemplate", "HtmlTemplate")
                        .WithMany("Categories")
                        .HasForeignKey("TemplateId");

                    b.HasOne("MOE.Models.CategoryTypes", "CategoryTypes")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.HasOne("MOE.Models.User", null)
                        .WithMany("Category")
                        .HasForeignKey("UserId");

                    b.Navigation("CategoryTypes");

                    b.Navigation("HtmlTemplate");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("MOE.Models.CategoryTypes", b =>
                {
                    b.HasOne("MOE.Models.CategoryTypes", null)
                        .WithMany("CategoryTypes1")
                        .HasForeignKey("CategoryTypesId");
                });

            modelBuilder.Entity("MOE.Models.Files", b =>
                {
                    b.HasOne("MOE.Models.Category", "Category")
                        .WithMany("Files1")
                        .HasForeignKey("CatId");

                    b.HasOne("MOE.Models.Language", "Language")
                        .WithMany("Files1")
                        .HasForeignKey("LangId");

                    b.HasOne("MOE.Models.FilesType", "FileType")
                        .WithMany("Files1")
                        .HasForeignKey("Type");

                    b.HasOne("MOE.Models.User", "User")
                        .WithMany("Files1")
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("FileType");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MOE.Models.FilesList", b =>
                {
                    b.HasOne("MOE.Models.Files", "Files")
                        .WithMany("FileList")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Files");
                });

            modelBuilder.Entity("MOE.Models.Group", b =>
                {
                    b.HasOne("MOE.Models.Language", "Language")
                        .WithMany("Groups")
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOE.Models.User", "GroupUser")
                        .WithMany("Groups")
                        .HasForeignKey("UserId");

                    b.Navigation("GroupUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("MOE.Models.HtmlTemplate", b =>
                {
                    b.HasOne("MOE.Models.Language", "Language")
                        .WithMany("HtmlTemplates")
                        .HasForeignKey("LangId");

                    b.HasOne("MOE.Models.HtmlTemplatesType", "HtmlTemplatesType")
                        .WithMany()
                        .HasForeignKey("Type");

                    b.HasOne("MOE.Models.User", "User")
                        .WithMany("HtmlTemplates")
                        .HasForeignKey("UserId");

                    b.Navigation("HtmlTemplatesType");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MOE.Models.Menu", b =>
                {
                    b.HasOne("MOE.Models.Language", "Language")
                        .WithMany("Menus")
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOE.Models.MenuLocation", "MenuLocation")
                        .WithMany("Menus")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOE.Models.Menu", "MenuParentRef")
                        .WithMany("ParentMenus")
                        .HasForeignKey("ParentId");

                    b.HasOne("MOE.Models.User", "User")
                        .WithMany("Menus")
                        .HasForeignKey("UserId");

                    b.Navigation("Language");

                    b.Navigation("MenuLocation");

                    b.Navigation("MenuParentRef");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MOE.Models.Page", b =>
                {
                    b.HasOne("MOE.Models.Language", "Language")
                        .WithMany("Pages")
                        .HasForeignKey("LangId");

                    b.HasOne("MOE.Models.Page", "PageRef")
                        .WithMany("Pages")
                        .HasForeignKey("Parent");

                    b.HasOne("MOE.Models.HtmlTemplate", "HtmlTemplate")
                        .WithMany("Pages")
                        .HasForeignKey("TemplateId");

                    b.HasOne("MOE.Models.User", "UserAdd")
                        .WithMany("UserAdds")
                        .HasForeignKey("UserId");

                    b.Navigation("HtmlTemplate");

                    b.Navigation("Language");

                    b.Navigation("PageRef");

                    b.Navigation("UserAdd");
                });

            modelBuilder.Entity("MOE.Models.PageCategory", b =>
                {
                    b.HasOne("MOE.Models.Category", "Category")
                        .WithMany("PageCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOE.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOE.Models.Page", "Page")
                        .WithMany("PageCategories")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("MOE.Models.Tag", b =>
                {
                    b.HasOne("MOE.Models.Language", "Language")
                        .WithMany("Tags")
                        .HasForeignKey("LangId");

                    b.HasOne("MOE.Models.HtmlTemplate", "HtmlTemplate")
                        .WithMany("Tags")
                        .HasForeignKey("TempId");

                    b.HasOne("MOE.Models.User", "User")
                        .WithMany("Tags")
                        .HasForeignKey("UserId");

                    b.Navigation("HtmlTemplate");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MOE.Models.TagRel", b =>
                {
                    b.HasOne("MOE.Models.Language", "Language")
                        .WithMany("TagRels")
                        .HasForeignKey("LangId");

                    b.HasOne("MOE.Models.Page", "Page")
                        .WithMany("TagRels")
                        .HasForeignKey("PageId");

                    b.HasOne("MOE.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");

                    b.Navigation("Language");

                    b.Navigation("Page");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MOE.Models.User", b =>
                {
                    b.HasOne("MOE.Models.User", "UserAddedRef")
                        .WithMany("Users")
                        .HasForeignKey("AddedBy");

                    b.HasOne("MOE.Models.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId");

                    b.HasOne("MOE.Models.Language", "Language")
                        .WithMany("Users")
                        .HasForeignKey("LangId");

                    b.Navigation("Group");

                    b.Navigation("Language");

                    b.Navigation("UserAddedRef");
                });

            modelBuilder.Entity("MOE.Models.AdminLogFor", b =>
                {
                    b.Navigation("AdminLogs");
                });

            modelBuilder.Entity("MOE.Models.Category", b =>
                {
                    b.Navigation("Files1");

                    b.Navigation("PageCategories");
                });

            modelBuilder.Entity("MOE.Models.CategoryTypes", b =>
                {
                    b.Navigation("CategoryTypes1");
                });

            modelBuilder.Entity("MOE.Models.Files", b =>
                {
                    b.Navigation("FileList");
                });

            modelBuilder.Entity("MOE.Models.FilesType", b =>
                {
                    b.Navigation("Files1");
                });

            modelBuilder.Entity("MOE.Models.Group", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MOE.Models.HtmlTemplate", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Pages");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("MOE.Models.Language", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Files1");

                    b.Navigation("Groups");

                    b.Navigation("HtmlTemplates");

                    b.Navigation("Menus");

                    b.Navigation("Pages");

                    b.Navigation("TagRels");

                    b.Navigation("Tags");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MOE.Models.Menu", b =>
                {
                    b.Navigation("ParentMenus");
                });

            modelBuilder.Entity("MOE.Models.MenuLocation", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("MOE.Models.Page", b =>
                {
                    b.Navigation("PageCategories");

                    b.Navigation("Pages");

                    b.Navigation("TagRels");
                });

            modelBuilder.Entity("MOE.Models.User", b =>
                {
                    b.Navigation("AdminLogs");

                    b.Navigation("Category");

                    b.Navigation("Files1");

                    b.Navigation("Groups");

                    b.Navigation("HtmlTemplates");

                    b.Navigation("Menus");

                    b.Navigation("Tags");

                    b.Navigation("UserAdds");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
